{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"MatrixOne/Glossary/","text":"","title":"Glossary"},{"location":"MatrixOne/Develop/Design-a-Database/","text":"","title":"Design a Database"},{"location":"MatrixOne/Develop/Load-Data/","text":"","title":"Load Data"},{"location":"MatrixOne/Develop/Read-Data/","text":"","title":"Read Data"},{"location":"MatrixOne/Develop/Write-Data/","text":"","title":"Write Data"},{"location":"MatrixOne/FAQs/General-FAQs/","text":"","title":"General FAQs"},{"location":"MatrixOne/Get-Started/Benchmark-Test/","text":"Star Schema Benchmark Tests Preparation Start Schema Benchmark\uff08SSB\uff09is a popular scenario for OLAP database performance tests. In 0.1.0, only single table can work in MatrixOne. The following contents can be followed to data generation, data importing and querying. 1. Compile dbgen: $ git clone git@github.com:vadimtk/ssb-dbgen.git $ cd ssb-dbgen $ make 2. Generate data: With -s 1 dbgen generates 6 million rows (670MB), while while -s 10 it generates 60 million rows (which takes some time) $ ./dbgen -s 1 -T c $ ./dbgen -s 1 -T l` $ ./dbgen -s 1 -T p $ ./dbgen -s 1 -T s $ ./dbgen -s 1 -T d 3. Create tables in MatrixOne create database if not exists ssb; use ssb drop table if exists lineorder; drop table if exists part; drop table if exists supplier; drop table if exists customer; drop table if exists dim_date; drop table if exists lineorder_flat; create table lineorder ( lo_orderkey bigint, lo_linenumber int, lo_custkey int, lo_partkey int, lo_suppkey int, lo_orderdate char(10), lo_orderpriority char (15), lo_shippriority tinyint, lo_quantity double, lo_extendedprice double, lo_ordtotalprice double, lo_discount double, lo_revenue double, lo_supplycost double, lo_tax double, lo_commitdate char(10), lo_shipmode char (10) ) ; create table part ( p_partkey int, p_name varchar (22), p_mfgr char (6), p_category char (7), p_brand char (9), p_color varchar (11), p_type varchar (25), p_size int, p_container char (10) ) ; create table supplier ( s_suppkey int, s_name char (25), s_address varchar (25), s_city char (10), s_nation char (15), s_region char (12), s_phone char (15) ) ; create table customer ( c_custkey int, c_name varchar (25), c_address varchar (25), c_city char (10), c_nation char (15), c_region char (12), c_phone char (15), c_mktsegment char (10) ) ; create table dim_date ( d_datekey int, d_date char (18), d_dayofweek char (9), d_month char (9), d_year int, d_yearmonthnum int, d_yearmonth char (7), d_daynuminweek int, d_daynuminmonth int, d_daynuminyear int, d_monthnuminyear int, d_weeknuminyear int, d_sellingseason varchar (12), d_lastdayinweekfl varchar (1), d_lastdayinmonthfl varchar (1), d_holidayfl varchar (1), d_weekdayfl varchar (1) ) ; CREATE TABLE lineorder_flat ( LO_ORDERKEY bigint, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE int, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE double, LO_SUPPLYCOST double, LO_TAX double, LO_COMMITDATE int, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) ); 4. Load data into the created tables If you use dbgen to generate date for ssb, there is still an extra step to replace the \u2018,\u2019 in the end of every line. In the directory of ssb-dbgen, use the following command. $ sed -i 's/.$//' customer.tbl $ sed -i 's/.$//' date.tbl $ sed -i 's/.$//' supplier.tbl $ sed -i 's/.$//' lineorder.tbl $ sed -i 's/.$//' part.tbl Then modify the parameter of system_vars_config.toml to a larger one in matrixone directory, such as 10GB. And restart MatrixOne service. max-entry-bytes = \"10GB\" Load data into related tables with this command in MatrixOne. load data infile '/ssb-dbgen-path/supplier.tbl ' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/customer.tbl ' into table customer FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/date.tbl ' into table dim_date FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/supplier.tbl ' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/part.tbl ' into table part FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/lineorder.tbl ' into table lineorder FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table. If you want to run a single table SSB query test, there is still one more data files needed for lineorder_flat. You can get the data files directly: https://pan.baidu.com/s/1dCpcKsygdVuHzd-H-RWHFA code: k1rs Load data into lineorder_flat. load data infile '/ssb-dbgen-path/lineorder_flat.tbl ' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Run SSB Queries # Q1.1 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE<=19930131 AND LO_ORDERDATE>=19930101 AND LO_DISCOUNT BETWEEN 1 AND 3 AND LO_QUANTITY < 25; # Q1.2 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE<=19920131 AND LO_ORDERDATE>=19920101 AND LO_DISCOUNT BETWEEN 4 AND 6 AND LO_QUANTITY BETWEEN 26 AND 35; # Q1.3 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE = 19920101 AND LO_DISCOUNT BETWEEN 5 AND 7 AND LO_QUANTITY BETWEEN 26 AND 35; # Q2.1 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_CATEGORY = 'MFGR#11' AND S_REGION = 'AMERICA' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q2.2 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_BRAND BETWEEN 'MFGR#2221' AND 'MFGR#2228' AND S_REGION = 'ASIA' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q2.3 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_BRAND = 'MFGR#2239' AND S_REGION = 'EUROPE' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q3.1 SELECT C_NATION, S_NATION, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE C_REGION = 'ASIA' AND S_REGION = 'ASIA' AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19970101 GROUP BY C_NATION, S_NATION, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.2 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE C_NATION = 'CHINA' AND S_NATION = 'CHINA' AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19971231 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.3 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE (C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7') AND (S_CITY = 'UNITED KI0' OR S_CITY = 'UNITED KI7') AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19971231 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.4 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE (C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7') AND (S_CITY = 'MOZAMBIQU1' OR S_CITY = 'KENYA 4') AND LO_ORDERDATE >= 19971201 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q4.1 SELECT LO_ORDERDATE, C_NATION, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND (P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2') GROUP BY LO_ORDERDATE, C_NATION ORDER BY LO_ORDERDATE, C_NATION; # Q4.2 SELECT LO_ORDERDATE, S_NATION, P_CATEGORY, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND (LO_ORDERDATE>= 19970101 OR LO_ORDERDATE <= 19981231) AND (P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2') GROUP BY LO_ORDERDATE, S_NATION, P_CATEGORY ORDER BY LO_ORDERDATE, S_NATION, P_CATEGORY; # Q4.3 SELECT LO_ORDERDATE, S_CITY, P_BRAND, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE S_NATION = 'UNITED STATES' AND (LO_ORDERDATE>= 19970101 OR LO_ORDERDATE <= 19981231) AND P_CATEGORY = 'MFGR#14' GROUP BY LO_ORDERDATE, S_CITY, P_BRAND ORDER BY LO_ORDERDATE, S_CITY, P_BRAND;","title":"Benchmark Test"},{"location":"MatrixOne/Get-Started/Benchmark-Test/#star-schema-benchmark-tests-preparation","text":"Start Schema Benchmark\uff08SSB\uff09is a popular scenario for OLAP database performance tests. In 0.1.0, only single table can work in MatrixOne. The following contents can be followed to data generation, data importing and querying.","title":"Star Schema Benchmark Tests Preparation"},{"location":"MatrixOne/Get-Started/Benchmark-Test/#1-compile-dbgen","text":"$ git clone git@github.com:vadimtk/ssb-dbgen.git $ cd ssb-dbgen $ make","title":"1. Compile dbgen:"},{"location":"MatrixOne/Get-Started/Benchmark-Test/#2-generate-data","text":"With -s 1 dbgen generates 6 million rows (670MB), while while -s 10 it generates 60 million rows (which takes some time) $ ./dbgen -s 1 -T c $ ./dbgen -s 1 -T l` $ ./dbgen -s 1 -T p $ ./dbgen -s 1 -T s $ ./dbgen -s 1 -T d","title":"2. Generate data:"},{"location":"MatrixOne/Get-Started/Benchmark-Test/#3-create-tables-in-matrixone","text":"create database if not exists ssb; use ssb drop table if exists lineorder; drop table if exists part; drop table if exists supplier; drop table if exists customer; drop table if exists dim_date; drop table if exists lineorder_flat; create table lineorder ( lo_orderkey bigint, lo_linenumber int, lo_custkey int, lo_partkey int, lo_suppkey int, lo_orderdate char(10), lo_orderpriority char (15), lo_shippriority tinyint, lo_quantity double, lo_extendedprice double, lo_ordtotalprice double, lo_discount double, lo_revenue double, lo_supplycost double, lo_tax double, lo_commitdate char(10), lo_shipmode char (10) ) ; create table part ( p_partkey int, p_name varchar (22), p_mfgr char (6), p_category char (7), p_brand char (9), p_color varchar (11), p_type varchar (25), p_size int, p_container char (10) ) ; create table supplier ( s_suppkey int, s_name char (25), s_address varchar (25), s_city char (10), s_nation char (15), s_region char (12), s_phone char (15) ) ; create table customer ( c_custkey int, c_name varchar (25), c_address varchar (25), c_city char (10), c_nation char (15), c_region char (12), c_phone char (15), c_mktsegment char (10) ) ; create table dim_date ( d_datekey int, d_date char (18), d_dayofweek char (9), d_month char (9), d_year int, d_yearmonthnum int, d_yearmonth char (7), d_daynuminweek int, d_daynuminmonth int, d_daynuminyear int, d_monthnuminyear int, d_weeknuminyear int, d_sellingseason varchar (12), d_lastdayinweekfl varchar (1), d_lastdayinmonthfl varchar (1), d_holidayfl varchar (1), d_weekdayfl varchar (1) ) ; CREATE TABLE lineorder_flat ( LO_ORDERKEY bigint, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE int, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE double, LO_SUPPLYCOST double, LO_TAX double, LO_COMMITDATE int, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) );","title":"3. Create tables in MatrixOne"},{"location":"MatrixOne/Get-Started/Benchmark-Test/#4-load-data-into-the-created-tables","text":"If you use dbgen to generate date for ssb, there is still an extra step to replace the \u2018,\u2019 in the end of every line. In the directory of ssb-dbgen, use the following command. $ sed -i 's/.$//' customer.tbl $ sed -i 's/.$//' date.tbl $ sed -i 's/.$//' supplier.tbl $ sed -i 's/.$//' lineorder.tbl $ sed -i 's/.$//' part.tbl Then modify the parameter of system_vars_config.toml to a larger one in matrixone directory, such as 10GB. And restart MatrixOne service. max-entry-bytes = \"10GB\" Load data into related tables with this command in MatrixOne. load data infile '/ssb-dbgen-path/supplier.tbl ' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/customer.tbl ' into table customer FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/date.tbl ' into table dim_date FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/supplier.tbl ' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/part.tbl ' into table part FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/lineorder.tbl ' into table lineorder FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table. If you want to run a single table SSB query test, there is still one more data files needed for lineorder_flat. You can get the data files directly: https://pan.baidu.com/s/1dCpcKsygdVuHzd-H-RWHFA code: k1rs Load data into lineorder_flat. load data infile '/ssb-dbgen-path/lineorder_flat.tbl ' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Run SSB Queries # Q1.1 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE<=19930131 AND LO_ORDERDATE>=19930101 AND LO_DISCOUNT BETWEEN 1 AND 3 AND LO_QUANTITY < 25; # Q1.2 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE<=19920131 AND LO_ORDERDATE>=19920101 AND LO_DISCOUNT BETWEEN 4 AND 6 AND LO_QUANTITY BETWEEN 26 AND 35; # Q1.3 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE = 19920101 AND LO_DISCOUNT BETWEEN 5 AND 7 AND LO_QUANTITY BETWEEN 26 AND 35; # Q2.1 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_CATEGORY = 'MFGR#11' AND S_REGION = 'AMERICA' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q2.2 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_BRAND BETWEEN 'MFGR#2221' AND 'MFGR#2228' AND S_REGION = 'ASIA' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q2.3 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_BRAND = 'MFGR#2239' AND S_REGION = 'EUROPE' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q3.1 SELECT C_NATION, S_NATION, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE C_REGION = 'ASIA' AND S_REGION = 'ASIA' AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19970101 GROUP BY C_NATION, S_NATION, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.2 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE C_NATION = 'CHINA' AND S_NATION = 'CHINA' AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19971231 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.3 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE (C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7') AND (S_CITY = 'UNITED KI0' OR S_CITY = 'UNITED KI7') AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19971231 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.4 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE (C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7') AND (S_CITY = 'MOZAMBIQU1' OR S_CITY = 'KENYA 4') AND LO_ORDERDATE >= 19971201 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q4.1 SELECT LO_ORDERDATE, C_NATION, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND (P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2') GROUP BY LO_ORDERDATE, C_NATION ORDER BY LO_ORDERDATE, C_NATION; # Q4.2 SELECT LO_ORDERDATE, S_NATION, P_CATEGORY, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND (LO_ORDERDATE>= 19970101 OR LO_ORDERDATE <= 19981231) AND (P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2') GROUP BY LO_ORDERDATE, S_NATION, P_CATEGORY ORDER BY LO_ORDERDATE, S_NATION, P_CATEGORY; # Q4.3 SELECT LO_ORDERDATE, S_CITY, P_BRAND, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE S_NATION = 'UNITED STATES' AND (LO_ORDERDATE>= 19970101 OR LO_ORDERDATE <= 19981231) AND P_CATEGORY = 'MFGR#14' GROUP BY LO_ORDERDATE, S_CITY, P_BRAND ORDER BY LO_ORDERDATE, S_CITY, P_BRAND;","title":"4. Load data into the created tables"},{"location":"MatrixOne/Get-Started/Connect-To-MatrixOne-Server/","text":"1. Install MySQL client. MatrixOne supports the MySQL wire protocol, so you can use MySQL client drivers to connect from various languages. Currently, MatrixOne is only compatible with Oracle MySQL client. This means that some features might not work with MariaDB client. 2. Connect to MatrixOne server: $ mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 $ mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Now, MatrixOne only supports the TCP listener.","title":"Connecting to MatrixOne Server"},{"location":"MatrixOne/Get-Started/Connect-To-MatrixOne-Server/#1-install-mysql-client","text":"MatrixOne supports the MySQL wire protocol, so you can use MySQL client drivers to connect from various languages. Currently, MatrixOne is only compatible with Oracle MySQL client. This means that some features might not work with MariaDB client.","title":"1. Install MySQL client."},{"location":"MatrixOne/Get-Started/Connect-To-MatrixOne-Server/#2-connect-to-matrixone-server","text":"$ mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 $ mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Now, MatrixOne only supports the TCP listener.","title":"2. Connect to MatrixOne server:"},{"location":"MatrixOne/Get-Started/Explore-Matrixone-Features/","text":"","title":"Explore Matrixone Features"},{"location":"MatrixOne/Get-Started/Install-MatrixOne/","text":"Installation MatrixOne supports Linux and MacOS. You can install MatrixOne either by building from source or using docker . Building from source Install Go (version 1.17 is required). Get the MatrixOne code: $ git clone https://github.com/matrixorigin/matrixone.git $ cd matrixone Run make: You can run make debug , make clean , or anything else our Makefile offers. $ make config $ make build Boot MatrixOne server: $ ./mo-server system_vars_config.toml Using docker Install Docker, then verify that Docker daemon is running in the background: $ docker --version Create and run the container for the latest release of MatrixOne. It will pull the image from Docker Hub if not exists. $ docker run -d -p 6001:6001 --name matrixone matrixorigin/matrixone:latest","title":"Install MatrixOne"},{"location":"MatrixOne/Get-Started/Install-MatrixOne/#installation","text":"MatrixOne supports Linux and MacOS. You can install MatrixOne either by building from source or using docker .","title":"Installation"},{"location":"MatrixOne/Get-Started/Install-MatrixOne/#building-from-source","text":"Install Go (version 1.17 is required). Get the MatrixOne code: $ git clone https://github.com/matrixorigin/matrixone.git $ cd matrixone Run make: You can run make debug , make clean , or anything else our Makefile offers. $ make config $ make build Boot MatrixOne server: $ ./mo-server system_vars_config.toml","title":"Building from source"},{"location":"MatrixOne/Get-Started/Install-MatrixOne/#using-docker","text":"Install Docker, then verify that Docker daemon is running in the background: $ docker --version Create and run the container for the latest release of MatrixOne. It will pull the image from Docker Hub if not exists. $ docker run -d -p 6001:6001 --name matrixone matrixorigin/matrixone:latest","title":"Using docker"},{"location":"MatrixOne/Get-Started/Learn-MatrixOne-SQL/","text":"","title":"Learn MatrixOne SQL"},{"location":"MatrixOne/Overview/Architecture/","text":"Query Parser Layer Parser : Parses SQL, Streaming Query, or Python language into an abstract syntax tree for further processing. Planner : Finds the best execution plan through rule-based, cost-based optimization algorithms, and transfers abstract syntax tree to plan tree. IR Generator : Converts Python code into an intermediate representation. Computation Layer JIT Compilation : Turns SQL plan tree or IR code into a native program using LLVM at runtime. Vectorized Execution : MatrixOne leverages SIMD instructions to construct vectorized execution pipelines. Cache : Multi-version cache of data, indexes, and metadata for queries. Cluster Management Layer MatrixCube is a fundamental library for building distributed systems, which offers guarantees about reliability, consistency, and scalability. It is designed to facilitate distributed, stateful application building to allow developers only need to focus on the business logic on a single node. MatrixCube is currently built upon multi-raft to provide replicated state machine and will migrate to Paxos families to increase friendliness to scenarios spanning multiple data centers. - Prophet : Used by MatrixCube to manage and schedule the MatrixOne cluster. - Transaction Manager : MatrixOne supports distributed transaction of snapshot isolation level. - Replicated State Machine : MatrixOne uses RAFT-based consensus algorithms and hyper logic clocks to implement strong consistency of the clusters. Introduction of more advanced state-machine replication protocols is yet to come. Replicated Storage Layer Row Storage : Stores serving workload, metadata, and catalog. Column Storage : Stores analytical workload and materialized views. Storage Provision Layer MatrixOne stores data in shared storage of S3 / HDFS, or the local disk, on-premise server, hybrid and any cloud, or even smart devices.","title":"Architecture"},{"location":"MatrixOne/Overview/Architecture/#query-parser-layer","text":"Parser : Parses SQL, Streaming Query, or Python language into an abstract syntax tree for further processing. Planner : Finds the best execution plan through rule-based, cost-based optimization algorithms, and transfers abstract syntax tree to plan tree. IR Generator : Converts Python code into an intermediate representation.","title":"Query Parser Layer"},{"location":"MatrixOne/Overview/Architecture/#computation-layer","text":"JIT Compilation : Turns SQL plan tree or IR code into a native program using LLVM at runtime. Vectorized Execution : MatrixOne leverages SIMD instructions to construct vectorized execution pipelines. Cache : Multi-version cache of data, indexes, and metadata for queries.","title":"Computation Layer"},{"location":"MatrixOne/Overview/Architecture/#cluster-management-layer","text":"MatrixCube is a fundamental library for building distributed systems, which offers guarantees about reliability, consistency, and scalability. It is designed to facilitate distributed, stateful application building to allow developers only need to focus on the business logic on a single node. MatrixCube is currently built upon multi-raft to provide replicated state machine and will migrate to Paxos families to increase friendliness to scenarios spanning multiple data centers. - Prophet : Used by MatrixCube to manage and schedule the MatrixOne cluster. - Transaction Manager : MatrixOne supports distributed transaction of snapshot isolation level. - Replicated State Machine : MatrixOne uses RAFT-based consensus algorithms and hyper logic clocks to implement strong consistency of the clusters. Introduction of more advanced state-machine replication protocols is yet to come.","title":"Cluster Management Layer"},{"location":"MatrixOne/Overview/Architecture/#replicated-storage-layer","text":"Row Storage : Stores serving workload, metadata, and catalog. Column Storage : Stores analytical workload and materialized views.","title":"Replicated Storage Layer"},{"location":"MatrixOne/Overview/Architecture/#storage-provision-layer","text":"MatrixOne stores data in shared storage of S3 / HDFS, or the local disk, on-premise server, hybrid and any cloud, or even smart devices.","title":"Storage Provision Layer"},{"location":"MatrixOne/Overview/Introduction/","text":"What is MatrixOne? MatrixOne is a planet scale, cloud-edge native big data engine crafted for heterogeneous workloads. It provides an end-to-end data processing platform that is highly autonomous and easy to use, to empower users to store, manipulate, and analyze data across devices, edges, and clouds, with minimal operational overheads. Features Planet Scalability MatrixOne cluster can easily expand capacity during SQL processing, computation, and storage, by adding nodes to the cluster on the fly. Cloud-Edge Native Not limited to public clouds, hybrid clouds, on-premise servers, or smart devices, MatrixOne accommodates itself to myriads of infrastructure while still providing top services with low latency and high throughput. Hybrid Streaming, Transactional and Analytical Processing Engine By converging multiple engines, MatrixOne can support hybrid streaming, transactional, and analytical workloads; with its pluggable architecture, MatrixOne allows for easy integration with third-party engines. High Availability MatrixOne uses a RAFT-based consensus algorithm to provide fault tolerance in one zone. And a more advanced state-machine replication protocol is planned for the future to achieve geo-distributed active-active. Ease of Use An important goal of MatrixOne is to make it easy for users to operate and manage data, making daily work almost effortless. - No Dependency : Download, install, or start MatrixOne straightforwardly without depending on external toolings. - Simplify Administration : Re-balancing, failover, system tuning, and other administrative tasks are fully automatic. - MySQL-compatible Syntax : MatrixOne allows you to query data using traditional SQL queries. End-to-End Automated Data Science By streaming SQL and user-defined functions, MatrixOne provides end-to-end data processing pipelines to deliver productive data science applications. Contributing See Contributing Guide for details on contribution workflows. Roadmap Check out Roadmap for MatrixOne development plan. Community You can join MatrixOne community on Slack to discuss and ask questions. License MatrixOne is licensed under the Apache License, Version 2.0 .","title":"Introduction"},{"location":"MatrixOne/Overview/Introduction/#what-is-matrixone","text":"MatrixOne is a planet scale, cloud-edge native big data engine crafted for heterogeneous workloads. It provides an end-to-end data processing platform that is highly autonomous and easy to use, to empower users to store, manipulate, and analyze data across devices, edges, and clouds, with minimal operational overheads.","title":"What is MatrixOne?"},{"location":"MatrixOne/Overview/Introduction/#features","text":"","title":"Features"},{"location":"MatrixOne/Overview/Introduction/#planet-scalability","text":"MatrixOne cluster can easily expand capacity during SQL processing, computation, and storage, by adding nodes to the cluster on the fly.","title":"Planet Scalability"},{"location":"MatrixOne/Overview/Introduction/#cloud-edge-native","text":"Not limited to public clouds, hybrid clouds, on-premise servers, or smart devices, MatrixOne accommodates itself to myriads of infrastructure while still providing top services with low latency and high throughput.","title":"Cloud-Edge Native"},{"location":"MatrixOne/Overview/Introduction/#hybrid-streaming-transactional-and-analytical-processing-engine","text":"By converging multiple engines, MatrixOne can support hybrid streaming, transactional, and analytical workloads; with its pluggable architecture, MatrixOne allows for easy integration with third-party engines.","title":"Hybrid Streaming, Transactional and Analytical Processing Engine"},{"location":"MatrixOne/Overview/Introduction/#high-availability","text":"MatrixOne uses a RAFT-based consensus algorithm to provide fault tolerance in one zone. And a more advanced state-machine replication protocol is planned for the future to achieve geo-distributed active-active.","title":"High Availability"},{"location":"MatrixOne/Overview/Introduction/#ease-of-use","text":"An important goal of MatrixOne is to make it easy for users to operate and manage data, making daily work almost effortless. - No Dependency : Download, install, or start MatrixOne straightforwardly without depending on external toolings. - Simplify Administration : Re-balancing, failover, system tuning, and other administrative tasks are fully automatic. - MySQL-compatible Syntax : MatrixOne allows you to query data using traditional SQL queries.","title":"Ease of Use"},{"location":"MatrixOne/Overview/Introduction/#end-to-end-automated-data-science","text":"By streaming SQL and user-defined functions, MatrixOne provides end-to-end data processing pipelines to deliver productive data science applications.","title":"End-to-End Automated Data Science"},{"location":"MatrixOne/Overview/Introduction/#contributing","text":"See Contributing Guide for details on contribution workflows.","title":"Contributing"},{"location":"MatrixOne/Overview/Introduction/#roadmap","text":"Check out Roadmap for MatrixOne development plan.","title":"Roadmap"},{"location":"MatrixOne/Overview/Introduction/#community","text":"You can join MatrixOne community on Slack to discuss and ask questions.","title":"Community"},{"location":"MatrixOne/Overview/Introduction/#license","text":"MatrixOne is licensed under the Apache License, Version 2.0 .","title":"License"},{"location":"MatrixOne/Overview/MySQL-Compatibility/","text":"","title":"MySQL Compatibility"},{"location":"MatrixOne/Overview/Performance/","text":"","title":"Performance"},{"location":"MatrixOne/Overview/What%27s-New/","text":"","title":"What's New?"},{"location":"MatrixOne/Reference/CLI-Commands/","text":"","title":"CLI Commands"},{"location":"MatrixOne/Reference/Configuration-File-Parameters/","text":"The configuration file is located in matrixone/pkg/config/test/system_vars_config.toml . The 0.1.0 version is a standalone version, only the following parameters should be paied attention to. The other settings should remain default. General Settings Parameter Type Default Value Range Functionality rootpassword string \"\" string value password for root user dumpdatabase string default string value dump database name for backup port int64 6001 [0 - 65536] port defines which port the mo-server listens on and clients connect to host string 0.0.0.0 [0.0.0.0 - 255.255.255.255] listening ip sendRow bool false [true, false] send data row while producing dumpEnv bool false [true, false] dump Environment with memEngine Null nodes for testing Debug Settings Parameter Type Default Value Range Functionality level string debug [debug, info, warn, error, fatal] the log output level format string json [json, console] output log style filename string \"\" string value output log filename max-size int64 512 [0 - 314572800] maximum log file size max-days int64 0 [0 - 314572800] maximum log file days kept max-backups int64 0 [0 - 314572800] maximum numbers of old log files to retain Memory Settings Parameter Type Default Value Range Functionality hostMmuLimitation int64 1099511627776 [0 - 1099511627776] host mmu limitation. default: 1 << 40 = 1099511627776 guestMmuLimitation int64 1099511627776 [0 - 1099511627776] guest mmu limitation. default: 1 << 40 = 1099511627776 mempoolMaxSize int64 1099511627776 [0 - 1099511627776] mempool maxsize. default: 1 << 40 = 1099511627776 mempoolFactor int64 8 [0 - TBD] mempool factor. Default: 8 processLimitationSize int64 42949672960 [0 - 42949672960] process.Limitation.Size. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationPartitionRows int64 42949672960 [0 - 42949672960] process.Limitation.PartitionRows. default: 10 << 32 = 42949672960","title":"Configuration File Parameters"},{"location":"MatrixOne/Reference/Configuration-File-Parameters/#general-settings","text":"Parameter Type Default Value Range Functionality rootpassword string \"\" string value password for root user dumpdatabase string default string value dump database name for backup port int64 6001 [0 - 65536] port defines which port the mo-server listens on and clients connect to host string 0.0.0.0 [0.0.0.0 - 255.255.255.255] listening ip sendRow bool false [true, false] send data row while producing dumpEnv bool false [true, false] dump Environment with memEngine Null nodes for testing","title":"General Settings"},{"location":"MatrixOne/Reference/Configuration-File-Parameters/#debug-settings","text":"Parameter Type Default Value Range Functionality level string debug [debug, info, warn, error, fatal] the log output level format string json [json, console] output log style filename string \"\" string value output log filename max-size int64 512 [0 - 314572800] maximum log file size max-days int64 0 [0 - 314572800] maximum log file days kept max-backups int64 0 [0 - 314572800] maximum numbers of old log files to retain","title":"Debug Settings"},{"location":"MatrixOne/Reference/Configuration-File-Parameters/#memory-settings","text":"Parameter Type Default Value Range Functionality hostMmuLimitation int64 1099511627776 [0 - 1099511627776] host mmu limitation. default: 1 << 40 = 1099511627776 guestMmuLimitation int64 1099511627776 [0 - 1099511627776] guest mmu limitation. default: 1 << 40 = 1099511627776 mempoolMaxSize int64 1099511627776 [0 - 1099511627776] mempool maxsize. default: 1 << 40 = 1099511627776 mempoolFactor int64 8 [0 - TBD] mempool factor. Default: 8 processLimitationSize int64 42949672960 [0 - 42949672960] process.Limitation.Size. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationPartitionRows int64 42949672960 [0 - 42949672960] process.Limitation.PartitionRows. default: 10 << 32 = 42949672960","title":"Memory Settings"},{"location":"MatrixOne/Reference/Error-Codes/","text":"","title":"Error Codes"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Types/","text":"| Data Type | Size | Min Value \uff5c Max Value | ----------- | ---------------- | | TINYINT | Fetch resource | | SMALLINT | Update resource | | INT | BIGINT | Delete resource |","title":"Data Types"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/","text":"Matrixone-v0.1.0 Release Notes We are excited to announce the first release of MatrixOne 0.1.0 on 2021/10/24. Cheers! Docker docker pull matrixorigin/matrixone:0.1.0 Features SQL Following SQL statements are supported in this release. DDL CREATE / DROP DATABASE CREATE / DROP TABLE DML INSERT LOAD DATA SELECT WHERE GROUP BY ORDER BY LIMIT, OFFSET SHOW DATABASES TABLES USE Data Types TINYINT / SMALLINT / INT / BIGINT, SIGNED / UNSIGNED FLOAT / DOUBLE CHAR / VARCHAR Operators , >=, <, <=, <>, !=, = BETWEEN \u2026 AND \u2026, NOT BETWEEN \u2026 AND \u2026 AND, &&, OR, || +, -, *, /, %, MOD, DIV, NEG CAST Aggregation Functions COUNT SUM AVG MAX MIN Database Engine MySQL dialect is supported. Build-in Append only columnar engine(AOE) has been supported as the first fusion database engine. Real-time analytical queries are supported. Vectorized query execution engine, based on MPP solution, is introduced. Part of the expression execution has been vectorized through SIMD instructions. Distributed AOE with strong consistency guaranteed by RAFT has been supported. The performance of replicated state machine has been greatly improved through the unique design of reusing RAFT log as well as Write-Ahead log without any redundancy. Contributors This release includes 453 commits by 16 authors. Special thanks to the first author: Yan Wenze (@nnsgmsone) Chen Mingsong\uff08@m-schen\uff09 Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Wei Ziran (@w-zr) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"v0.1.0 Release Notes"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#matrixone-v010-release-notes","text":"We are excited to announce the first release of MatrixOne 0.1.0 on 2021/10/24. Cheers!","title":"Matrixone-v0.1.0 Release Notes"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#docker","text":"docker pull matrixorigin/matrixone:0.1.0","title":"Docker"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#features","text":"","title":"Features"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#sql","text":"Following SQL statements are supported in this release.","title":"SQL"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#ddl","text":"CREATE / DROP DATABASE CREATE / DROP TABLE","title":"DDL"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#dml","text":"INSERT LOAD DATA SELECT WHERE GROUP BY ORDER BY LIMIT, OFFSET SHOW DATABASES TABLES USE","title":"DML"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#data-types","text":"TINYINT / SMALLINT / INT / BIGINT, SIGNED / UNSIGNED FLOAT / DOUBLE CHAR / VARCHAR","title":"Data Types"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#operators","text":", >=, <, <=, <>, !=, = BETWEEN \u2026 AND \u2026, NOT BETWEEN \u2026 AND \u2026 AND, &&, OR, || +, -, *, /, %, MOD, DIV, NEG CAST","title":"Operators"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#aggregation-functions","text":"COUNT SUM AVG MAX MIN","title":"Aggregation Functions"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#database-engine","text":"MySQL dialect is supported. Build-in Append only columnar engine(AOE) has been supported as the first fusion database engine. Real-time analytical queries are supported. Vectorized query execution engine, based on MPP solution, is introduced. Part of the expression execution has been vectorized through SIMD instructions. Distributed AOE with strong consistency guaranteed by RAFT has been supported. The performance of replicated state machine has been greatly improved through the unique design of reusing RAFT log as well as Write-Ahead log without any redundancy.","title":"Database Engine"},{"location":"MatrixOne/Releases/v0.1.0-Release-Notes/#contributors","text":"This release includes 453 commits by 16 authors. Special thanks to the first author: Yan Wenze (@nnsgmsone) Chen Mingsong\uff08@m-schen\uff09 Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Wei Ziran (@w-zr) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"Contributors"},{"location":"MatrixOne/Troubleshoot/Common-Errors/","text":"","title":"Common Errors"},{"location":"MatrixOne/Troubleshoot/File-an-Issue/","text":"","title":"File an Issue"},{"location":"MatrixOne/Troubleshoot/Troubleshoot-Query-Behavior/","text":"","title":"Troubleshoot Query Behavior"}]}